#!/bin/sh
### BEGIN INIT INFO
# Provides:          mlmmj / mlmmj simple web interface daemon wrapper
# Required-Start:    $local_fs $network $named $time $syslog
# Required-Stop:     $local_fs $network $named $time $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Description:       This script provides a simple wrapper for mlmmj run as a daemon
#                    It invokes mlmmj on all the subdirectories of /var/spool/mlmmj
#                    And invokes the web interface : https://github.com/tchapi/mlmmj-simple-web-interface
### END INIT INFO

NAME=mlmmj

SCRIPT="/usr/bin/mlmmj-maintd -d /var/spool/mlmmj"
WEBSCRIPT="cd /home/groups && node index.js -- mlmmjweb"
PIDGET="pgrep mlmmj-maintd"
WEBPIDGET="pgrep -f mlmmjweb"
RUNAS=root
WEBRUNAS=list

PIDFILE=/var/run/$NAME.pid
WEBPIDFILE=/var/run/$NAME-web.pid
LOGFILE=/var/log/$NAME.log

start() {
  if [ -f $PIDFILE ] && kill -0 $(cat $PIDFILE); then
    echo 'Service already running' >&2
    return 1
  fi
  echo 'Starting service…' >&2
  local CMD="$SCRIPT &> \"$LOGFILE\" & echo \$!"
  su -c "$CMD" $RUNAS
  sudo sh -c "$PIDGET > $PIDFILE"
  # web
  local CMDWEB="$WEBSCRIPT &>/dev/null"
  su -c "$CMDWEB" $WEBRUNAS
  sudo sh -c "$WEBPIDGET > $WEBPIDFILE"
  echo 'Service started' >&2
}

stop() {
  if [ ! -f "$PIDFILE" ] || ! kill -0 $(cat "$PIDFILE"); then
    echo 'Service not running' >&2
    return 1
  fi
  echo 'Stopping service…' >&2
  sudo kill -15 $(cat "$PIDFILE") && sudo rm -f "$PIDFILE"
  if [ ! -f "$WEBPIDFILE" ] || ! kill -0 $(cat "$WEBPIDFILE"); then
    echo 'Web service not running' >&2
  else
    sudo kill -15 $(cat "$WEBPIDFILE") && sudo rm -f "$WEBPIDFILE"
  fi
  echo 'Service stopped' >&2
}

uninstall() {
  echo -n "Are you really sure you want to uninstall this service? That cannot be undone. [yes|No] "
  local SURE
  read SURE
  if [ "$SURE" = "yes" ]; then
    stop
    rm -f "$PIDFILE"
    rm -f "$WEBPIDFILE"
    echo "Notice: log file was not removed: '$LOGFILE'" >&2
    update-rc.d -f $NAME remove
    rm -fv "$0"
  fi
}

status() {
    printf "%-50s" "Checking $NAME..."
    if [ -f $PIDFILE ]; then
        PID=$(cat $PIDFILE)
        if [ -z "$(ps axf | grep ${PID} | grep -v grep)" ]; then
            printf "%s\n" "The process appears to be dead but pidfile still exists"
        else
            echo "Running, the PID is $PID"
        fi
        printf "%-50s" "Checking $NAME-web..."
        if [ -f $WEBPIDFILE ]; then
            WEBPID=$(cat $WEBPIDFILE)
                if [ -z "$(ps axf | grep ${WEBPID} | grep -v grep)" ]; then
                    printf "%s\n" "The web process appears to be dead but pidfile still exists"
                else
                    echo "Running, the PID is $WEBPID"
                fi
        else
            printf "%s\n" "Web service not running"
        fi
    else
        printf "%s\n" "Service not running"
    fi
}


case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  status)
    status
    ;;
  uninstall)
    uninstall
    ;;
  restart)
    stop
    start
    ;;
  *)
    echo "Usage: $0 {start|stop|status|restart|uninstall}"
esac